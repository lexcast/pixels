{"version":3,"sources":["utils/closerColor.js","utils/index.js","components/FileDropzone.js","components/PaletteGenerate.js","components/PalettePixels.js","components/PaletteSelector.js","components/AlgorithmSelector.js","components/PaletteCounter.js","components/GlobalCounter.js","components/ImagePixels.js","components/ImagesGrid.js","components/ImageDetail.js","components/Cost.js","selectors/imageColors.js","components/App.js","serviceWorker.js","index.js"],"names":["algorithm","matchColor","getPixels","img","w","width","h","height","context","document","createElement","getContext","drawImage","data","getImageData","colors","y","x","i","hex","rgbToHex","r","g","b","toString","padStart","loadImage","url","a","load","Promise","resolve","reject","Image","onload","onerror","src","rgbToLab","rgb","z","Math","pow","L","A","B","hexToRgb","replace","m","result","exec","parseInt","extractRgb","d","substring","length","split","React","memo","setImages","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","newImage","name","image","pixels","oldImages","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","className","accept","images","setPalettes","generatePalette","title","prompt","limit","q","RgbQuant","method","Object","keys","key","sample","newPalette","palette","c","oldPalettes","onClick","useKey","map","style","backgroundColor","palettes","selectedPalette","setSelectedPalette","algorithms","EUCLIDEAN","DELTA_E76","DELTA_E94","DELTA_E00","toLab","id","value","lab","includes","from","alg","nearestColor","match","color","minIndex","minDistance","Infinity","p","distance","DeltaE","minP","selectedAlgorithm","setSelectedAlgorithm","count","colorsGlobal","cost","sprites","size","titled","j","colorsImage","currency","setSelectedImage","list","imageRenderer","index","alt","imageRendering","total","toFixed","rowCount","rowHeight","rowRenderer","moveSelectedImage","useEffect","handleKey","e","keyCode","addEventListener","removeEventListener","setCost","setCurrency","newCost","newCurrency","isNaN","parseFloat","localStorage","setItem","imageColors","createSelectorCreator","memoize","args","reduce","acc","val","JSON","stringify","createSelector","closerColor","colorImage","colorGlobal","flat","matched","newP","App","useState","getItem","defaultPalettes","selectedImage","useMemo","globalCount","move","imagesKeys","indexOf","newIndex","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f37046e.chunk.js","sourcesContent":["import nearestColor from \"nearest-color\";\nimport { rgbToLab, extractRgb, hexToRgb } from \"utils\";\nimport DeltaE from \"delta-e\";\n\nexport const algorithms = {\n  EUCLIDEAN: \"Euclidean\",\n  DELTA_E76: \"DeltaE76\",\n  DELTA_E94: \"DeltaE94\",\n  DELTA_E00: \"DeltaE00\"\n};\n\nlet palette = {};\nlet algorithm;\nlet matchColor;\n\nconst from = (colors, alg = algorithms.EUCLIDEAN) => {\n  algorithm = alg;\n  if (algorithm === algorithms.EUCLIDEAN) {\n    matchColor = nearestColor.from(colors);\n  } else {\n    palette = toLab(colors);\n  }\n};\n\nconst match = color => {\n  if (algorithm === algorithms.EUCLIDEAN) {\n    return matchColor(color);\n  }\n\n  let minDistance = Infinity;\n  let minIndex;\n\n  palette.forEach((p, i) => {\n    const lab = color.includes(\"#\")\n      ? rgbToLab(hexToRgb(color))\n      : rgbToLab(extractRgb(color));\n\n    const distance = DeltaE[\"get\" + algorithm](lab, p.lab);\n    if (distance < minDistance) {\n      minIndex = i;\n      minDistance = distance;\n    }\n  });\n\n  const minP = palette[minIndex];\n\n  return {\n    name: minP.id,\n    value: minP.value,\n    distance: minDistance\n  };\n};\n\nconst toLab = colors => {\n  return Object.keys(colors).map(id => {\n    const value = colors[id];\n    const lab = value.includes(\"#\")\n      ? rgbToLab(hexToRgb(value))\n      : rgbToLab(extractRgb(value));\n\n    return { id, value, lab };\n  });\n};\n\nexport default { from, match };\n","const PIXEL_SIZE = 9.826;\n\nconst getPixels = img => {\n  const w = img.width;\n  const h = img.height;\n  var canvas = document.createElement(\"canvas\");\n  var context = canvas.getContext(\"2d\");\n  context.drawImage(img, 0, 0);\n\n  const data = context.getImageData(0, 0, w, h).data;\n\n  const colors = [];\n  for (var y = 0; y < h; y++) {\n    colors[y] = [];\n    for (var x = 0; x < w; x++) {\n      const i = (y * w + x) * 4;\n\n      colors[y][x] =\n        data[i + 3] === 0\n          ? 0\n          : {\n              hex: rgbToHex(data[i], data[i + 1], data[i + 2]),\n              r: data[i],\n              g: data[i + 1],\n              b: data[i + 2]\n            };\n    }\n  }\n\n  return colors;\n};\n\nconst rgbToHex = (r, g, b) => {\n  return (\n    \"#\" +\n    r.toString(16).padStart(2, \"0\") +\n    g.toString(16).padStart(2, \"0\") +\n    b.toString(16).padStart(2, \"0\")\n  );\n};\n\nconst loadImage = async url => {\n  const load = url => {\n    return new Promise((resolve, reject) => {\n      let img = new Image();\n      img.onload = () => resolve(img);\n      img.onerror = reject;\n      img.src = url;\n    });\n  };\n\n  return await load(url);\n};\n\nconst rgbToLab = rgb => {\n  let r = rgb.r / 255;\n  let g = rgb.g / 255;\n  let b = rgb.b / 255;\n  let x;\n  let y;\n  let z;\n\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n\n  return { L: 116 * y - 16, A: 500 * (x - y), B: 200 * (y - z) };\n};\n\nconst hexToRgb = hex => {\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n    return r + r + g + g + b + b;\n  });\n\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      }\n    : null;\n};\n\nconst extractRgb = rgb => {\n  const d = rgb\n    .substring(4, rgb.length - 1)\n    .replace(/ /g, \"\")\n    .split(\",\");\n\n  return { r: d[0], g: d[1], b: d[2] };\n};\n\nexport {\n  getPixels,\n  loadImage,\n  rgbToHex,\n  rgbToLab,\n  hexToRgb,\n  extractRgb,\n  PIXEL_SIZE\n};\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { loadImage, getPixels } from \"utils\";\n\nconst FileDropzone = ({ setImages }) => {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      acceptedFiles.forEach((file) => {\n        const reader = new FileReader();\n\n        reader.onabort = () => console.log(\"file reading was aborted\");\n        reader.onerror = () => console.log(\"file reading has failed\");\n        reader.onload = async () => {\n          const url = reader.result;\n          const img = await loadImage(url);\n\n          const newImage = {\n            name: file.name,\n            width: img.width,\n            height: img.height,\n            image: img,\n            url,\n            pixels: getPixels(img),\n          };\n\n          setImages((oldImages) => {\n            return { ...oldImages, [file.name]: newImage };\n          });\n        };\n\n        reader.readAsDataURL(file);\n      });\n    },\n    [setImages]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      className=\"flex items-center justify-center p-6 w-1/2 mx-2 cursor-pointer text-center hover:bg-gray-800 rounded-lg border-2 border-dashed border-gray-500\"\n    >\n      <input {...getInputProps()} accept=\"image/*\" />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <p>Drag 'n' drop some files here, or click to select files</p>\n      )}\n    </div>\n  );\n};\n\nexport default React.memo(FileDropzone);\n","import React, { useCallback } from \"react\";\nimport RgbQuant from \"rgbquant\";\nimport { rgbToHex } from \"utils\";\n\nconst PaletteGenerate = ({ images, setPalettes }) => {\n  const generatePalette = useCallback(() => {\n    const title = prompt(\"Set palette title\", \"New Palette\");\n    const limit = prompt(\"Set palette limit\", 32);\n\n    if (limit && title) {\n      const q = new RgbQuant({ colors: limit, method: 1 });\n\n      Object.keys(images).forEach(key => {\n        q.sample(images[key].image);\n      });\n\n      const newPalette = {};\n      q.palette(true).forEach(c => {\n        const hex = rgbToHex(c[0], c[1], c[2]);\n        newPalette[hex] = hex;\n      });\n\n      setPalettes(oldPalettes => {\n        return { ...oldPalettes, [title]: newPalette };\n      });\n    }\n  }, [images, setPalettes]);\n\n  return (\n    <button\n      onClick={generatePalette}\n      className=\"uppercase flex items-center justify-center cursor-pointer mx-2 p-6 w-1/2 text-center rounded-lg border-2 hover:bg-gray-800 border-dashed border-gray-500\"\n    >\n      Generate palette from images\n    </button>\n  );\n};\n\nexport default React.memo(PaletteGenerate);\n","import React from \"react\";\nimport { PIXEL_SIZE } from \"utils\";\n\nconst PalettePixels = ({ palette, useKey }) => {\n  return (\n    <div className=\"flex flex-wrap items-center justify-center\">\n      {Object.keys(palette).map(c => {\n        return (\n          <div\n            key={c}\n            className=\"inline-block\"\n            style={{\n              backgroundColor: useKey ? c : palette[c],\n              width: `${PIXEL_SIZE}px`,\n              height: `${PIXEL_SIZE}px`\n            }}\n          ></div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PalettePixels);\n","import React from \"react\";\nimport PalettePixels from \"./PalettePixels\";\n\nconst PaletteSelector = ({ palettes, selectedPalette, setSelectedPalette }) => {\n  return (\n    <div className=\"flex m-3 items-stretch\">\n      {Object.keys(palettes).map(key => {\n        return (\n          <div\n            title={key}\n            key={key}\n            onClick={() =>\n              setSelectedPalette(selectedPalette === key ? null : key)\n            }\n            className={\n              \"flex items-center m-2 cursor-pointer rounded border-2 w p-3 border-dashed\" +\n              (selectedPalette === key\n                ? \" border-gray-400\"\n                : \" border-transparent\")\n            }\n          >\n            <PalettePixels palette={palettes[key]} />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PaletteSelector);\n","import React from \"react\";\nimport { algorithms } from \"utils/closerColor\";\n\nconst AlgorithmSelector = ({ selectedAlgorithm, setSelectedAlgorithm }) => {\n  return (\n    <div className=\"flex m-1 items-center justify-center text-base text-gray-400\">\n      {Object.keys(algorithms).map(key => {\n        const a = algorithms[key];\n\n        return (\n          <div\n            key={a}\n            onClick={() => setSelectedAlgorithm(a)}\n            className={\n              \"flex items-center m-2 cursor-pointer rounded border-2 py-1 px-2 border-dashed\" +\n              (selectedAlgorithm === a\n                ? \" border-gray-400\"\n                : \" border-transparent\")\n            }\n          >\n            {a}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(AlgorithmSelector);\n","import React from \"react\";\n\nconst PaletteCounter = ({ palette }) => {\n  return (\n    <div className=\"p-3 flex flex-wrap items-center justify-center\">\n      {Object.keys(palette).map(c => {\n        return (\n          <div\n            key={c}\n            title={palette[c].id}\n            className=\"relative inline-flex items-center justify-center w-10 h-10\"\n            style={{ backgroundColor: c }}\n          >\n            <span className=\"absolute px-1 bottom-0 right-0 bg-white text-gray-700 text-xs opacity-25\">\n              {palette[c].count}\n            </span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(PaletteCounter);\n","import React from \"react\";\nimport PaletteCounter from \"./PaletteCounter\";\n\nconst GlobalCounter = ({ colorsGlobal, pixels, cost, sprites }) => {\n  return (\n    <div className=\"p-3\">\n      <div className=\"text-center text-sm uppercase\">\n        <span className=\"mr-2\">\n          Sprites: <b>{sprites}</b>\n        </span>\n        <span className=\"mr-2\">\n          Pixels: <b>{pixels}</b>\n        </span>\n        <span>\n          Cost: <b>${cost}</b>\n        </span>\n      </div>\n      <PaletteCounter palette={colorsGlobal} />\n    </div>\n  );\n};\n\nexport default React.memo(GlobalCounter);\n","import React from \"react\";\n\nconst ImagePixels = ({ pixels, map, palette, width, height, size, titled }) => {\n  return (\n    <div\n      style={{\n        width: width * size + \"px\",\n        height: height * size + \"px\"\n      }}\n    >\n      {pixels.map((r, i) => {\n        return (\n          <div className=\"flex\" key={i} style={{ height: size + \"px\" }}>\n            {r.map((p, j) => {\n              if (!p) {\n                return (\n                  <div\n                    key={j}\n                    className=\"inline-block bg-transparent\"\n                    style={{\n                      width: size + \"px\",\n                      height: size + \"px\"\n                    }}\n                  />\n                );\n              } else {\n                const color = palette ? palette[map[p.hex]] : p.hex;\n\n                return (\n                  <div\n                    key={j}\n                    className=\"inline-block\"\n                    title={titled ? map[p.hex] : null}\n                    style={{\n                      backgroundColor: color,\n                      width: size + \"px\",\n                      height: size + \"px\"\n                    }}\n                  />\n                );\n              }\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default React.memo(ImagePixels);\n","import React from \"react\";\nimport ImagePixels from \"./ImagePixels\";\nimport PalettePixels from \"./PalettePixels\";\nimport { List, AutoSizer } from \"react-virtualized\";\n\nconst ImagesGrid = ({\n  images,\n  palette,\n  selectedPalette,\n  colorsImage,\n  cost,\n  currency,\n  setSelectedImage,\n}) => {\n  const list = Object.keys(images);\n\n  const imageRenderer = ({ key, index, style }) => {\n    const id = list[index];\n    const image = images[id];\n\n    return (\n      <div\n        key={key}\n        style={style}\n        onClick={() => setSelectedImage(id)}\n        className=\"flex w-1/2 p-2 cursor-pointer hover:bg-gray-800\"\n      >\n        <div className=\"w-20 flex items-center justify-center\">\n          <img\n            src={image.url}\n            alt={id}\n            style={{\n              imageRendering: \"pixelated\",\n              width: image.width + \"px\",\n              height: image.height + \"px\",\n            }}\n          />\n        </div>\n        <div className=\"w-20 flex items-center justify-center\">\n          <ImagePixels\n            pixels={image.pixels}\n            palette={palette}\n            map={selectedPalette ? colorsImage[id].map : null}\n            width={image.width}\n            height={image.height}\n            size={1}\n          />\n        </div>\n        {selectedPalette && (\n          <>\n            <div className=\"w-20 flex items-center justify-end text-sm\">\n              {colorsImage[id].total}\n            </div>\n            <div className=\"w-20 flex items-center justify-end text-sm\">\n              ${(colorsImage[id].total * cost).toFixed(2)}\n            </div>\n            <div className=\"flex-1 flex flex-wrap items-center justify-center px-2\">\n              <PalettePixels palette={colorsImage[id].count} useKey />\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"p-3 flex w-3/4 m-auto flex-col items-center\">\n      <div className=\"flex w-full p-2 text-xs uppercase text-gray-500 bg-gray-800 rounded-t opacity-50\">\n        <div className=\"w-20 flex items-center justify-center\">Original</div>\n        <div className=\"w-20 flex items-center justify-center\">Result</div>\n        <div className=\"w-20 flex items-center justify-end\">Pixels</div>\n        <div className=\"w-20 flex items-center justify-end\">\n          Cost <sub>({currency})</sub>\n        </div>\n        <div className=\"flex-1 flex flex-wrap items-center justify-center\">\n          Palette\n        </div>\n      </div>\n      <div className=\"w-full\">\n        <AutoSizer>\n          {({ width }) => (\n            <List\n              height={300}\n              width={width}\n              rowCount={list.length}\n              rowHeight={80}\n              rowRenderer={imageRenderer}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ImagesGrid);\n","import React, { useEffect } from \"react\";\nimport ImagePixels from \"./ImagePixels\";\nimport PaletteCounter from \"./PaletteCounter\";\nimport { PIXEL_SIZE } from \"utils\";\n\nconst ImageDetail = ({\n  id,\n  image,\n  colors,\n  palette,\n  selectedPalette,\n  setSelectedImage,\n  moveSelectedImage,\n  cost,\n}) => {\n  useEffect(() => {\n    const handleKey = (e) => {\n      if (e.keyCode === 27) {\n        setSelectedImage(null);\n      }\n\n      if (e.keyCode === 37) {\n        moveSelectedImage(-1);\n      }\n\n      if (e.keyCode === 39) {\n        moveSelectedImage(1);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKey, false);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKey, false);\n    };\n  });\n\n  return (\n    <>\n      <div\n        onClick={() => setSelectedImage(null)}\n        className=\"bg-gray-900 opacity-50 w-full h-full fixed z-20 top-0 left-0\"\n      ></div>\n      <div className=\"w-full h-full px-24 py-10 pointer-events-none fixed z-30 top-0 left-0 flex items-center justify-center\">\n        <button\n          onClick={() => moveSelectedImage(-1)}\n          className=\"mr-2 w-10 h-10 rounded hover:bg-gray-700 flex items-center justify-center text-white font-bold text-xl cursor-pointer pointer-events-auto\"\n        >\n          ◄\n        </button>\n        <div className=\"flex flex-col max-h-full max-w-full p-3 overflow-auto pointer-events-auto bg-gray-700 rounded shadow-lg\">\n          <div className=\"flex flex-wrap items-center justify-center p-3\">\n            <img\n              src={image.url}\n              alt={id}\n              style={{\n                imageRendering: \"pixelated\",\n                width: image.width * PIXEL_SIZE + \"px\",\n                height: image.height * PIXEL_SIZE + \"px\",\n              }}\n            />\n            <ImagePixels\n              pixels={image.pixels}\n              map={selectedPalette ? colors.map : null}\n              palette={palette}\n              width={image.width}\n              height={image.height}\n              size={PIXEL_SIZE}\n              titled={selectedPalette ? true : false}\n            />\n          </div>\n          {selectedPalette && (\n            <>\n              <div className=\"p-3\">\n                <div className=\"text-center text-sm uppercase\">\n                  <span className=\"mr-2\">\n                    Pixels: <b>{colors.total}</b>\n                  </span>\n                  <span>\n                    Cost: <b>${(colors.total * cost).toFixed(2)}</b>\n                  </span>\n                </div>\n              </div>\n              <div className=\"p-3\">\n                <PaletteCounter palette={colors.count} />\n              </div>\n            </>\n          )}\n        </div>\n        <button\n          onClick={() => moveSelectedImage(1)}\n          className=\"ml-2 w-10 h-10 rounded hover:bg-gray-700 flex items-center justify-center text-white font-bold text-xl cursor-pointer pointer-events-auto\"\n        >\n          ►\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(ImageDetail);\n","import React from \"react\";\n\nconst Cost = ({ cost, currency, setCost, setCurrency }) => {\n  const askCost = () => {\n    const newCost = prompt(\"Set cost per pixel\", cost);\n    const newCurrency = prompt(\"Set currency\", currency);\n\n    if (newCost && newCurrency && !isNaN(newCost)) {\n      setCost(parseFloat(newCost));\n      setCurrency(newCurrency);\n\n      localStorage.setItem('cost', newCost);\n      localStorage.setItem('currency', newCurrency);\n    }\n  };\n\n  return (\n    <button\n      onClick={askCost}\n      className=\"uppercase flex items-center justify-center cursor-pointer mx-2 p-6 w-1/2 text-center rounded-lg border-2 hover:bg-gray-800 border-dashed border-gray-500 w-16\"\n    >\n      Cost per pixel: ${cost}\n      {currency}\n    </button>\n  );\n};\n\nexport default React.memo(Cost);\n","import { createSelectorCreator } from \"reselect\";\nimport memoize from \"lodash.memoize\";\n\nconst hashFn = (...args) =>\n  args.reduce((acc, val) => acc + \"-\" + JSON.stringify(val), \"\");\nconst createSelector = createSelectorCreator(memoize, hashFn);\n\nconst imageColors = createSelector(\n  a => a.img,\n  a => a.closerColor,\n  a => a.palette,\n  a => a.selectedAlgorithm,\n  (img, closerColor, palette) => {\n    let count = 0;\n    const colorImage = { total: 0, count: {}, map: {} };\n    const colorGlobal = {};\n\n    img.pixels.flat().forEach(p => {\n      if (!p) {\n        return;\n      }\n\n      let matched;\n      let newP;\n      if (!colorImage.map[p.hex]) {\n        matched = closerColor.match(p.hex);\n        newP = matched.value;\n        colorImage.map[p.hex] = matched.name;\n      } else {\n        newP = palette[colorImage.map[p.hex]];\n      }\n\n      if (!colorImage.count[newP]) {\n        colorImage.count[newP] = { id: matched.name, count: 1 };\n      } else {\n        colorImage.count[newP].count++;\n      }\n\n      if (!colorGlobal[newP]) {\n        colorGlobal[newP] = { id: matched.name, count: 1 };\n      } else {\n        colorGlobal[newP].count++;\n      }\n\n      colorImage.total++;\n      count++;\n    });\n\n    return { colorImage, colorGlobal, count };\n  }\n);\n\nexport default imageColors;\n","import React, { useState, useMemo } from \"react\";\nimport FileDropzone from \"./FileDropzone\";\nimport PaletteGenerate from \"./PaletteGenerate\";\nimport PaletteSelector from \"./PaletteSelector\";\nimport AlgorithmSelector from \"./AlgorithmSelector\";\nimport GlobalCounter from \"./GlobalCounter\";\nimport ImagesGrid from \"./ImagesGrid\";\nimport ImageDetail from \"./ImageDetail\";\nimport Cost from \"./Cost\";\nimport defaultPalettes from \"data/palettes\";\nimport closerColor, { algorithms } from \"utils/closerColor\";\nimport imageColors from \"selectors/imageColors\";\n\nconst DEFAULT_COST = 0.001;\nconst DEFAULT_CURRENCY = \"USD\";\n\nconst App = () => {\n  const [cost, setCost] = useState(\n    localStorage.getItem(\"cost\") || DEFAULT_COST\n  );\n  const [currency, setCurrency] = useState(\n    localStorage.getItem(\"currency\") || DEFAULT_CURRENCY\n  );\n  const [images, setImages] = useState({});\n  const [palettes, setPalettes] = useState(defaultPalettes);\n  const [selectedPalette, setSelectedPalette] = useState(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\n    algorithms.DELTA_E00\n  );\n\n  const moveSelectedImage = (move) => {\n    const imagesKeys = Object.keys(images);\n    const index = imagesKeys.indexOf(selectedImage);\n    const newIndex =\n      index + move < 0\n        ? imagesKeys.length - 1\n        : index + move > imagesKeys.length - 1\n        ? 0\n        : index + move;\n\n    setSelectedImage(imagesKeys[newIndex]);\n  };\n\n  const palette = palettes[selectedPalette];\n\n  const { colorsImage, colorsGlobal, globalCount } = useMemo(() => {\n    const colorsImage = {};\n    const colorsGlobal = {};\n    let globalCount = 0;\n\n    if (palette) {\n      closerColor.from(palette, selectedAlgorithm);\n\n      Object.keys(images).forEach((key) => {\n        const img = images[key];\n\n        const { colorImage, colorGlobal, count } = imageColors({\n          img,\n          closerColor,\n          palette,\n          selectedAlgorithm,\n        });\n\n        colorsImage[key] = colorImage;\n        globalCount += count;\n        Object.keys(colorGlobal).forEach((p) => {\n          if (!colorsGlobal[p]) {\n            colorsGlobal[p] = colorGlobal[p];\n          } else {\n            colorsGlobal[p].count += colorGlobal[p].count;\n          }\n        });\n      });\n    }\n\n    return { colorsImage, colorsGlobal, globalCount };\n  }, [images, palette, selectedAlgorithm]);\n\n  const sprites = Object.keys(images).length;\n\n  return (\n    <div className=\"w-screen h-screen font-sans text-white p-3\">\n      <div className=\"flex p-3 text-gray-500 uppercase text-base\">\n        <FileDropzone {...{ setImages }} />\n        <PaletteGenerate {...{ images, setPalettes }} />\n        <Cost {...{ cost, currency, setCost, setCurrency }} />\n      </div>\n      <PaletteSelector {...{ palettes, selectedPalette, setSelectedPalette }} />\n      <AlgorithmSelector {...{ selectedAlgorithm, setSelectedAlgorithm }} />\n      {selectedPalette && sprites > 0 && (\n        <GlobalCounter\n          pixels={globalCount}\n          sprites={sprites}\n          cost={(globalCount * cost).toFixed(2)}\n          colorsGlobal={colorsGlobal}\n        />\n      )}\n      {Object.keys(images).length > 0 && (\n        <ImagesGrid\n          {...{\n            palette,\n            images,\n            selectedPalette,\n            colorsImage,\n            cost,\n            currency,\n            setSelectedImage,\n          }}\n        />\n      )}\n      {selectedImage && (\n        <ImageDetail\n          id={selectedImage}\n          image={images[selectedImage]}\n          colors={colorsImage[selectedImage]}\n          {...{\n            palette,\n            selectedPalette,\n            setSelectedImage,\n            cost,\n            moveSelectedImage,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}